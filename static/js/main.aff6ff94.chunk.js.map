{"version":3,"sources":["components/Spinner.jsx","components/Quote.jsx","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","viewBox","cx","cy","r","fill","strokeWidth","Quote","useState","isLoading","setIsLoading","quote","setQuote","isError","setIsError","useEffect","a","axios","result","data","fetchData","handleClick","get","res","id","body","author","onClick","href","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aff6ff94.chunk.js","sourcesContent":["/* Follow the author of this spinner on\r\nDribbble: https://dribbble.com/supahfunk\r\nTwitter: https://twitter.com/supahfunk\r\nCodepen: https://codepen.io/supah/ */\r\n\r\nimport React, { Fragment } from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => {\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<svg className='spinner' viewBox='0 0 50 50'>\r\n\t\t\t\t<circle\r\n\t\t\t\t\tclassName='path'\r\n\t\t\t\t\tcx='25'\r\n\t\t\t\t\tcy='25'\r\n\t\t\t\t\tr='20'\r\n\t\t\t\t\tfill='none'\r\n\t\t\t\t\tstrokeWidth='5'\r\n\t\t\t\t></circle>\r\n\t\t\t</svg>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nimport Spinner from './Spinner';\r\n\r\nimport axios from 'axios';\r\n\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './Quote.scss';\r\n\r\nconst Quote = () => {\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\tconst [quote, setQuote] = useState({});\r\n\tconst [isError, setIsError] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tsetIsError(false);\r\n\t\t\tsetIsLoading(true);\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await axios('https://favqs.com/api/qotd');\r\n\t\t\t\tsetQuote(result.data);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tsetIsError(true);\r\n\t\t\t}\r\n\t\t\tsetIsLoading(false);\r\n\t\t};\r\n\t\tfetchData();\r\n\t}, []);\r\n\r\n\tconst handleClick = async () => {\r\n\t\tconst res = await axios.get('https://favqs.com/api/qotd');\r\n\t\tsetQuote(res.data);\r\n\t\tsetIsLoading(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{isError && <div>Something went wrong...</div>}\r\n\t\t\t{isLoading && <Spinner />}\r\n\r\n\t\t\t{!isLoading && (\r\n\t\t\t\t<div id='quote-box'>\r\n\t\t\t\t\t<p id='text'>\r\n\t\t\t\t\t\t<span>\"</span>\r\n\t\t\t\t\t\t{quote.quote.body}\r\n\t\t\t\t\t\t<span>\"</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t{quote.quote.author ? (\r\n\t\t\t\t\t\t<p id='author'>- {quote.quote.author} -</p>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<p id='author-anonymous'>- Anonymous -</p>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<button id='new-quote' onClick={handleClick}>\r\n\t\t\t\t\t\tNew Quote\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<a\r\n\t\t\t\t\t\thref={`https://twitter.com/intent/tweet?text=\"${quote.quote.body}\"%20-%20${quote.quote.author}`}\r\n\t\t\t\t\t\tid='tweet-quote'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<i className='fa fa-twitter' /> Send quote to Twitter{' '}\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default Quote;\r\n","import React from 'react';\nimport Quote from './components/Quote';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Quote />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}